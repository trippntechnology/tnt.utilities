using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;

namespace TNT.Utilities.Console
{
	/// <summary>
	/// Reprents a listing of parameters that can be used by an application
	/// </summary>
	[Obsolete("Use TNT.ArgumentParser")]
	public class Parameters : List<Parameter>
	{
		/// <summary>
		/// Parameter delimiter
		/// </summary>
		protected string m_Delimiter;

		/// <summary>
		/// Gets the <see cref="Parameter"/> with the <paramref name="name"/>
		/// </summary>
		/// <param name="name">Parameter's name</param>
		/// <returns>Parameter with the given name</returns>
		public virtual Parameter this[string name]
		{
			get
			{
				var param = (from p in this where p.Name.Equals(name, StringComparison.CurrentCultureIgnoreCase) select p).SingleOrDefault();
				return param;
			}
		}

		/// <summary>
		/// Constructor that can be called to change the delimiter
		/// </summary>
		/// <param name="delimiter">Delimiter used to parse the arguments</param>
		public Parameters(string delimiter = "/")
		{
			m_Delimiter = delimiter;
		}

		/// <summary>
		/// Call to add a parameter.
		/// </summary>
		/// <param name="parameter">Parameter to add</param>
		/// <exception cref="ArgumentException">Throwns when a parameter already exists by the same name</exception>
		public new void Add(Parameter parameter)
		{
			// Check that this parameter has a unique Name
			Parameter foundParameter = this.Find(p => p.Name == parameter.Name);

			if (foundParameter != null)
			{
				throw new ArgumentException(string.Format("Parameter '{0}' already exists", parameter.Name));
			}

			if (parameter.Required)
			{
				base.Insert(0, parameter);
			}
			else
			{
				base.Add(parameter);
			}
		}

		/// <summary>
		/// Parses arguments
		/// </summary>
		/// <param name="args">Arguments to parse</param>
		/// <param name="postValidator"><see cref="Action"/> that can provide additional validation</param>
		/// <param name="swallowException">Specifies whether the exception should be swallowed. Default is true.</param>
		/// <exception cref="ArgumentException">Thrown when the argument does not match a parameter or when a 
		/// required parameter argument isn't provided</exception>
		public virtual bool ParseArgs(string[] args, Action<Parameters> postValidator = null, bool swallowException = true)
		{
			try
			{
				var argsPrime = args.Length == 0 ? new string[0] : string.Concat(" ", string.Join(" ", args)).Replace(string.Format(" {0}", m_Delimiter), "\n").Split('\n');
				Regex regex = new Regex("^(?<parm>[^ ]*)( (?<arg>.*))?$");

				foreach (string arg in argsPrime)
				{
					if (string.IsNullOrEmpty(arg))
					{
						continue;
					}

					Match match = regex.Match(arg);

					if (match.Success)
					{
						string key = match.Groups["parm"].ToString();
						string value = match.Groups["arg"].ToString();

						Parameter parameter = (from p in this where p.Name.ToLower() == key select p).SingleOrDefault();

						if (parameter == null)
						{
							throw new ArgumentException(string.Format("Parameter '{0}' is not valid", key));
						}

						// Flags will never have a value, so set the value. Other parameters should have a value. If they don't
						// don't set the value. If it's required, it will be discovered below.
						if (parameter is FlagParameter || !string.IsNullOrEmpty(value))
						{
							parameter.SetValue(value);
						}
					}
				}

				// Find required parameters that do not have a value
				var reqParams = (from p in this where p.Required && (p.Value == null || string.IsNullOrEmpty(p.Value.ToString())) select p);

				if (reqParams.Count() > 0)
				{
					throw new ArgumentException(string.Format("Parameter '{0}' is required", reqParams.First().Name));
				}

				if (postValidator != null)
				{
					postValidator(this);
				}

				return true;
			}
			catch (Exception ex)
			{
				System.Console.WriteLine();
				System.Console.WriteLine("Error: {0}", ex.Message);
				System.Console.WriteLine();
				System.Console.WriteLine(this.Usage());
				System.Console.WriteLine();

				if (!swallowException)
				{
					throw;
				}
			}

			return false;
		}

		/// <summary>
		/// Gets the usage text. Usage text is generated by obtaining the assembly's properties and displaying the 
		/// validation parameters descriptions.
		/// </summary>
		/// <returns>Usage</returns>
		public virtual string Usage()
		{
			StringBuilder usageTxt = new StringBuilder();
			Assembly asm = Assembly.GetEntryAssembly();

			// This was added for unit tests. For some reason there isn't an EntryAssembly so use
			if (asm == null)
			{
				asm = Assembly.GetCallingAssembly();
			}

			AssemblyDescriptionAttribute ada = ((AssemblyDescriptionAttribute)asm.GetCustomAttributes(typeof(AssemblyDescriptionAttribute), false)[0]);
			AssemblyCopyrightAttribute acra = ((AssemblyCopyrightAttribute)asm.GetCustomAttributes(typeof(AssemblyCopyrightAttribute), false)[0]);
			AssemblyCompanyAttribute aca = ((AssemblyCompanyAttribute)asm.GetCustomAttributes(typeof(AssemblyCompanyAttribute), false)[0]);

			usageTxt.AppendFormat("{0} version {1}\n", ada.Description, asm.GetName().Version.ToString());
			usageTxt.AppendLine(acra.Copyright);
			usageTxt.AppendLine();
			usageTxt.AppendFormat("  {0}", Path.GetFileNameWithoutExtension(asm.ManifestModule.Name));

			this.ForEach(p =>
				{
					usageTxt.AppendFormat(" {0}", p.Syntax());
				});

			usageTxt.AppendLine();
			usageTxt.AppendLine();

			this.ForEach(p =>
				{
					usageTxt.AppendLine(p.Usage());
				});

			return usageTxt.ToString();
		}

		/// <summary>
		/// Indicates whether a flag exists
		/// </summary>
		/// <param name="name">Name of flag parameter</param>
		/// <returns>True if flag exists, false otherwise</returns>
		public virtual bool FlagExists(string name)
		{
			var flagParameter = (from p in this where p is FlagParameter && p.Name.Equals(name, StringComparison.CurrentCultureIgnoreCase) && (p as FlagParameter).Exists select p).SingleOrDefault();
			return flagParameter != null;
		}
	}
}
